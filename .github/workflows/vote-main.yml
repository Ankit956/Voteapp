name: Deploy vote to ECS

on:
 
  # push:
  #   branches: [ master ]
  #   tags: 
  #     - .*
  
   # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1                   
  ECS_SERVICE: demo-ci-service               
  ECS_CLUSTER: test-aws-fargate              
  ECS_TASK_DEFINITION: .aws/demo-ci.json
  CONTAINER_NAME: demo-ci-container
  ECR_REPOSITORY: victor-test
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}

jobs:
  test: 
    runs-on: ubuntu-latest
    name: Test
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Test job
      run: |
        echo "This is the test job"

  build:
    needs: test
    name: Build image and push to ECR
    runs-on: ubuntu-latest
    outputs: 
      image: ${{ steps.build-image.outputs.image }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Set Tag Number
      id: tag-number
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      
    - name: Check Tag Release
      env:
          RELEASE_VERSION: ${{ steps.tag-number.outputs.tag }}
      run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-build
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, and tag image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        cd vote
        docker buildx build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --platform linux/amd64
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Push image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-build.outputs.registry }}
        IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
      run: |
        echo $IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy: 
    needs: build
    name: Deploy to Dev environment
    runs-on: ubuntu-latest
    steps:
    - run: echo ${{ needs.build.outputs.image }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build.outputs.image }}
          
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true         

