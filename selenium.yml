
version: "1.0"

stages:
  - "clone"
  - "build"
  - "test"
  - "push"
  - "deploy"

steps:
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_BRANCH}}"
    git: "github"
    stage: "clone"

  build:
    type: build
    title: "Build application docker images"
    stage: "build"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    disable_push: true
    dockerfile: "Dockerfile"
    scale:
      build-vote:
        title: "Building Docker image for vote service"
        image_name: "lrochette/vote"
        working_directory: "${{clone}}/vote"
      build-result:
        title: "Building Docker image for result service"
        type: "build"
        image_name: "lrochette/result"
        working_directory: "${{clone}}/result"
      build-worker:
        title: "Building Docker image for worker service"
        type: "build"
        image_name: "lrochette/worker"
        working_directory: "${{clone}}/worker"

  BuildingTestDockerImage:
    title: Building Test Docker Image
    type: build
    stage: "build"
    image_name: lrochette/example-voting-app-tests
    working_directory: ${{clone}}/Selenium
    dockerfile: Dockerfile
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'

  # Brandon's Test

  # selenium:
  #   image: selenium/standalone-firefox:latest
  #   user: 1000:1000
  #   ports:
  #     - 4444
  #   container_name: selenium

  PostDeploymentVerificationTests:
    title: Running Selenium DVTs
    stage: "test"
    type: composition
    composition:
      version: '2'
      services:
        voting:
          image: ${{build-vote}}
          ports:
            - 80
        result:
          image: ${{build-result}}
          ports:
            - 80
        selenium_hub:
          image: selenium/hub:3.141.59-20210311
          #container_name: seleniumhub
          ports:
            - 4444
          environment:
            - SE_OPTS=-debug

        chrome:
          image: selenium/node-chrome:3.141.59-20210311
          volumes:
            - /dev/shm
          depends_on:
            - selenium_hub
          environment:
            - SE_EVENT_BUS_HOST=selenium_hub
            - SE_EVENT_BUS_PUBLISH_PORT=4442
            - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
            - HUB_HOST=selenium_hub
            - REMOTE_HOST=http://chrome:5555
          ports:
            - 5900
            - 5555
    composition_candidates:
      test:
        image: ${{BuildingTestDockerImage}}
        working_dir: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        environment:
          VOTE_ENDPOINT_IP: voting
          RESULT_ENDPOINT_IP: result
        command: bash -c 'IFS=" " read -a browserarray <<< "${{BROWSERS}}" && for browser in "$${browserarray[@]}"; do BROWSER=$$browser python -m pytest -vvv --html=./selenium-report-$${browser}.html --self-contained-html ./tests/selenium/test_app.py; done'
        volumes:
          - '${{CF_VOLUME_NAME}}:/codefresh/volume'
    add_flow_volume_to_composition: true
    on_success:
      metadata:
        set:
          - '${{BuildingTestDockerImage.imageId}}':
              - SELENIUM_DVTS: true
    on_fail:
      metadata:
        set:
          - '${{BuildingTestDockerImage.imageId}}':
              - SELENIUM_DVTS: false

  uploadTestResults:
     title: Upload Selenium test reports
     image: codefresh/cf-docker-test-reporting
     working_directory: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
     stage: test
     environment:
       - REPORT_INDEX_FILE=selenium-report-chrome.html
       - BUCKET_NAME=cf-laurent-bucket
       - CF_STORAGE_INTEGRATION=google

  push:
    type: push
    tags:
       - "${{CF_BRANCH_TAG_NORMALIZED}}"
       - latest
    registry: docker-lr
    stage: push
    scale:
      push-vote:
        title: "Pushing vote image"
        candidate: ${{build-vote}}
        image_name: "lrochette/vote"
      push-worker:
        title: "Pushing worker image"
        candidate: ${{build-worker}}
        image_name: "lrochette/worker"
      push-result:
        title: "Pushing result image"
        candidate: ${{build-result}}
        image_name: "lrochette/result"

  storeHelmChart:
    title: Store the Helm chart
    type: helm
    stage: push
    working_directory: ${{CF_REPO_NAME}}
    arguments:
      helm_version: 3.2.3
      action: push
      chart_name: example-voting-app
      kube_context: laurent-cluster@codefresh-support
      # chart_repo_url: 'cm://h.cfcr.io/laurent-cf/default'
      # url is not needed if the HELM config is attached to the pipeline


  helmDebug:
    title: Debug helm
    type: helm
    stage: deploy
    fail_fast: false
    arguments:
      helm_version: 3.2.3
      action: auth
      kube_context: laurent-cluster@codefresh-support
      commands:
        - helm repo list
  #       - helm repo rm stable
  #       - helm repo add stable https://charts.helm.sh/stable
  #       - helm repo list


  helmDeploy:
    title: Helm upgrade
    type: helm
    stage: deploy
    working_directory: ${{CF_REPO_NAME}}
    arguments:
      helm_version: 3.2.3
      action: install
      chart_name: example-voting-app
      release_name: first
      namespace: voting
      kube_context: laurent-cluster@codefresh-support
